import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    ext {
        junitVersion = '5.6.0'
        testcontainersVersion = '1.14.1'
        mongodbDriverVersion = '4.0.2'
    }
}

plugins {
    id 'java'
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id 'java-library'
    id 'idea'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'jacoco'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.5"
}

apply from: "$rootDir/gradle/jacoco.gradle"

group = 'com.github.silaev'
version = '0.3.0'

repositories {
    mavenCentral()
}

lombok {
    version = "1.18.12"
}

configurations {
    propogated
    [implementation, testImplementation]*.extendsFrom propogated
}

dependencies {
    propogated(platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}"))
    propogated('org.testcontainers:toxiproxy')

    implementation("org.yaml:snakeyaml:1.25")

    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation('org.mockito:mockito-core:3.0.0')
    testImplementation('ch.qos.logback:logback-classic:1.2.3')
    testImplementation("org.mongodb:mongodb-driver-reactivestreams:${mongodbDriverVersion}")
    testImplementation("org.mongodb:mongodb-driver-sync:${mongodbDriverVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:3.3.0")
}

wrapper {
    gradleVersion = '6.4'
    distributionType = Wrapper.DistributionType.BIN
}

def junitParallelExecProperty = 'junit.jupiter.execution.parallel.enabled'

tasks.withType(Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions ops ->
        ops.excludeTags("integration-test")
    }

    task.failFast = true

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task integrationTest(type: Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions ops ->
        ops.includeTags("integration-test")
    }
    task.systemProperties(
        System.properties.findAll {
            it.key.toString().startsWith("mongoReplicaSetProperties") ||
                it.key.toString().startsWith("junit")
        }
    )
    if (!task.systemProperties.isEmpty()) {
        println("Detected test system properties: " + task.systemProperties)
    }

    task.failFast = true

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    if (System.properties.containsKey(junitParallelExecProperty)
        && (System.properties.get(junitParallelExecProperty))) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        forkEvery = 1
    }

    task.minHeapSize('512m')
    task.maxHeapSize('3072m')

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    finalizedBy jacocoTestReport
}

task delombok(type: DelombokTask) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
    doFirst {
        outputDir.deleteDir()
    }
}

shadowJar {
    //https://github.com/johnrengelman/shadow/issues/463
    classifier = ''
    relocate 'org.yaml.snakeyaml', 'com.github.silaev.mongodb.replicaset.shaded'
    dependencies {
        include(dependency('org.yaml:snakeyaml'))
    }
    mergeServiceFiles()
}

task sourcesJar(type: Jar) {
    dependsOn delombok
    from delombok.outputDir
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation"
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation"
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    options.locale = 'en_US'

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

def isPublishingProperty = 'isPublishing'

sourceSets {
    def isPublishing = System.properties.containsKey(isPublishingProperty) &&
        (System.properties.get(isPublishingProperty) == "true")
    main {
        java {
            srcDirs = isPublishing ? [delombok.outputDir] : ['src/main/java']
        }
    }
}

publishing {
    publications {
        shadow(MavenPublication) { MavenPublication publication ->
            project.shadow.component(publication)

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'MongoDB replica set'
                description = 'Java8 MongoDbReplicaSet to construct a full-featured MongoDB cluster for integration testing, reproducing production issues, learning distributed systems by the example of MongoDB'
                url = 'https://github.com/silaev/mongodb-replica-set'

                licenses {
                    license {
                        name = 'MIT'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'silaev'
                        name = 'Konstantin Silaev'
                        email = 'silaev256@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/silaev/mongodb-replica-set/'
                    connection = 'scm:git:git://github.com/silaev/mongodb-replica-set.git'
                    developerConnection = 'scm:git:ssh://git@github.com/silaev/mongodb-replica-set.git'
                }
            }

            pom.withXml {
                def dependencyManagementDependencies =
                    asNode().appendNode('dependencyManagement').appendNode('dependencies')

                project.configurations.propogated.allDependencies.each {
                    if (Category.REGULAR_PLATFORM == getCategory(it)) {
                        def dependencyNode = dependencyManagementDependencies.appendNode("dependency")
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode("scope", "import")
                        dependencyNode.appendNode("type", "pom")
                    } else {
                        def dependencyNode = asNode().get("dependencies")[0].appendNode("dependency")
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        if (!Objects.isNull(it.version)) {
                            dependencyNode.appendNode('version', it.version)
                        }
                        dependencyNode.appendNode("scope", "compile")
                    }
                }
            }

        }
    }
    repositories {
        maven {
            mavenLocal()
        }
    }
}

private static String getCategory(Dependency dependency) {
    dependency.properties.get("attributes")?.value?.value?.toString()
}


tasks.withType(PublishToMavenLocal) {
    onlyIf {
        System.properties.containsKey(isPublishingProperty) &&
            System.properties.get(isPublishingProperty) == "true"
    }
    doLast {
        System.properties.setProperty('isPublishing', "false")
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        System.properties.containsKey(isPublishingProperty) &&
            System.properties.get(isPublishingProperty) == "true"
    }
    doLast {
        System.properties.setProperty('isPublishing', "false")
    }
}

def bintrayUser = 'bintrayUser'
def bintrayApiKey = 'bintrayApiKey'
bintray {
    if (project.hasProperty(bintrayUser) &&
        project.hasProperty(bintrayApiKey)
    ) {
        user = project.property(bintrayUser)
        key = project.property(bintrayApiKey)

        publications = ['shadow']
        override = false

        pkg {
            repo = 'releases'
            name = project.name

            publish = true

            version {
                name = project.version
                vcsTag = project.version
                released = new Date()
                gpg {
                    sign = true
                }
            }
        }
    }
}

compileJava.dependsOn(delombok)
assemble.dependsOn shadowJar
